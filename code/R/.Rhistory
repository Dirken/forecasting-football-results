if(tolower("Nevada") == input)	return("NV")
if(tolower("New Hampshire") == input)	return("NH")
if(tolower("New Jersey") == input)	return("NJ")
if(tolower("New Mexico") == input)	return("NM")
if(tolower("New York") == input)	return("NY")
if(tolower("North Carolina") == input)	return("NC")
if(tolower("North Dakota") == input)	return("ND")
if(tolower("Ohio") == input)	return("OH")
if(tolower("Oklahoma") == input)	return("OK")
if(tolower("Oregon") == input)	return("OR")
if(tolower("Pennsylvania") == input)	return("PA")
if(tolower("Rhode Island") == input)	return("RI")
if(tolower("South Carolina") == input)	return("SC")
if(tolower("South Dakota") == input)	return("SD")
if(tolower("Tennessee") == input)	return("TN")
if(tolower("Texas") == input)	return("TX")
if(tolower("Utah") == input)	return("UT")
if(tolower("Vermont") == input)	return("VT")
if(tolower("Virginia") == input)	return("VA")
if(tolower("Washington") == input)	return("WA")
if(tolower("West Virginia") == input)	return("WV")
if(tolower("Wisconsin") == input)	return("WI")
if(tolower("Wyoming") == input)	return("WY")
}
plot(UFO$State, UFO$Sights)
barplot(table(UFO$Period), main="Bar Chart of Period")
plot(UFO$Period, UFO$Sights)
barplot(table(UFO$Month), main="Bar Chart of Month")
plot(UFO$Month, UFO$Sights)
foi <- glm(Sights ~ .*Period - Period*Period,family = poisson,  data = UFO)
anova(model,foi, test = "Chisq")
foi <- glm(Sights ~ .*Period - Period*Period,family = poisson,  data = UFO)
anova(model,foi, test = "Chisq")
foi <- glm(Sights ~ .*Period - Period*Period,family = poisson(link = "log"),  data = UFO)
anova(model,foi, test = "Chisq")
par(mfrow=c(2,2))
plot(chosenModel)
summary(BICForward)
#this took a WHILE
#nullModel <- glm(Sights ~ 1,
#                 family = poisson(link = "log"),
#                 data = UFO)
#save(nullModel,file="nullModel")
#
#completeModel <- glm(Sights ~ (.)^2,
#            family = poisson(link = "log"),
#            data = UFO)
#save(completeModel,file="completeModel")
#
#BICForward <- step(nullModel,
#                   scope = list(upper=completeModel),
#                   direction="both",
#                   criterion = "BIC",
#                   k = log(nrow(UFO)))
#save(BICForward,file="BICForward")
#
#BICBackward <- step(completeModel,
#                    scope = list(lower=nullModel),
#                    direction="both",
#                    criterion = "BIC",
#                    k = log(nrow(UFO)))
#save(BICBackward,file="BICBackward")
#
#AICForward <- step(nullModel,
#                   scope = list(upper=completeModel),
#                   direction="both",
#                   criterion = "AIC",
#                   k = 2)
#save(AICForward,file="AICForward")
load("BICForward")
load("AICForward")
load("BICBackward")
load("AICBackward")
load("nullModel")
load("completeModel")
summary(BICForward)
summary(BICForward)
summary(AICForward)
summary(BICBackward)
summary(AICBackward)
summary(nullModel)
kable(glance(BICForward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
kable(glance(AICForward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
kable(glance(BICBackward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
kable(glance(AICBackward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
foi <- glm(Sights ~ .*Period - Period*Period,family = poisson(link = "log"),  data = UFO)
anova(model,foi, test = "Chisq")
foi <- glm(Sights ~ .*Period - Period*Period,family = poisson(link = "log"),  data = UFO)
save(foi,file="foi1")
anova(model,foi, test = "Chisq")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
set.seed(777)
library(data.table)
library(mice)
UFO <- fread('UFO.csv')
# Converting explanatory variables to factors
UFO$State <- factor(UFO$State)
UFO$Period <- factor(UFO$Period, levels = c(1,2,3), labels = c("2000-2004", "2005-2009", "2010-2014"))
UFO$Month <- factor(UFO$Month, levels = c(1,2,3,4,5,6,7,8,9,10,11,12), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
UFO$Weekday <- factor(UFO$Weekday, levels = c(1,2,3,4,5,6,7), labels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
UFO$Hour <- factor(UFO$Hour)
md.pattern(UFO)
m.effects <- effects::allEffects(chosenModel)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
set.seed(777)
library(data.table)
library(mice)
UFO <- fread('UFO.csv')
# Converting explanatory variables to factors
UFO$State <- factor(UFO$State)
UFO$Period <- factor(UFO$Period, levels = c(1,2,3), labels = c("2000-2004", "2005-2009", "2010-2014"))
UFO$Month <- factor(UFO$Month, levels = c(1,2,3,4,5,6,7,8,9,10,11,12), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
UFO$Weekday <- factor(UFO$Weekday, levels = c(1,2,3,4,5,6,7), labels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
UFO$Hour <- factor(UFO$Hour)
md.pattern(UFO)
states <- function(input){
if(tolower("Alabama") == input)	return("AL")
if(tolower("Alaska") == input)	return("AK")
if(tolower("Arizona") == input)	return("AZ")
if(tolower("Arkansas") == input)	return("AR")
if(tolower("California") == input)	return("CA")
if(tolower("Colorado") == input)	return("CO")
if(tolower("Connecticut") == input)	return("CT")
if(tolower("Delaware") == input)	return("DE")
if(tolower("Florida") == input)	return("FL")
if(tolower("Georgia") == input)	return("GA")
if(tolower("Hawaii") == input)	return("HI")
if(tolower("Idaho") == input)	return("ID")
if(tolower("Illinois") == input)	return("IL")
if(tolower("Indiana") == input)	return("IN")
if(tolower("Iowa") == input)	return("IA")
if(tolower("Kansas") == input)	return("KS")
if(tolower("Kentucky") == input)	return("KY")
if(tolower("Louisiana") == input)	return("LA")
if(tolower("Maine") == input)	return("ME")
if(tolower("Maryland") == input)	return("MD")
if(tolower("Massachusetts") == input)	return("MA")
if(tolower("Michigan") == input)	return("MI")
if(tolower("Minnesota") == input)	return("MN")
if(tolower("Mississippi") == input)	return("MS")
if(tolower("Missouri") == input)	return("MO")
if(tolower("Montana") == input)	return("MT")
if(tolower("Nebraska") == input)	return("NE")
if(tolower("Nevada") == input)	return("NV")
if(tolower("New Hampshire") == input)	return("NH")
if(tolower("New Jersey") == input)	return("NJ")
if(tolower("New Mexico") == input)	return("NM")
if(tolower("New York") == input)	return("NY")
if(tolower("North Carolina") == input)	return("NC")
if(tolower("North Dakota") == input)	return("ND")
if(tolower("Ohio") == input)	return("OH")
if(tolower("Oklahoma") == input)	return("OK")
if(tolower("Oregon") == input)	return("OR")
if(tolower("Pennsylvania") == input)	return("PA")
if(tolower("Rhode Island") == input)	return("RI")
if(tolower("South Carolina") == input)	return("SC")
if(tolower("South Dakota") == input)	return("SD")
if(tolower("Tennessee") == input)	return("TN")
if(tolower("Texas") == input)	return("TX")
if(tolower("Utah") == input)	return("UT")
if(tolower("Vermont") == input)	return("VT")
if(tolower("Virginia") == input)	return("VA")
if(tolower("Washington") == input)	return("WA")
if(tolower("West Virginia") == input)	return("WV")
if(tolower("Wisconsin") == input)	return("WI")
if(tolower("Wyoming") == input)	return("WY")
}
#barplot(table(UFO$State), main="Bar Chart of State")
library(maps)
library(ggplot2)
us_states <- map_data("state")
us_states$region <- lapply(us_states$region, states)
head(us_states)
unique(us_states$region)
map <- table(UFO$State)
us_states$sights[us_states$region == "AL"] <- map["AL"]
us_states$sights[us_states$region == "AK"] <- map["AK"]
us_states$sights[us_states$region == "AZ"] <- map["AZ"]
us_states$sights[us_states$region == "AR"] <- map["AR"]
us_states$sights[us_states$region == "CA"] <- map["CA"]
us_states$sights[us_states$region == "CO"] <- map["CO"]
us_states$sights[us_states$region == "CT"] <- map["CT"]
us_states$sights[us_states$region == "DE"] <- map["DE"]
us_states$sights[us_states$region == "FL"] <- map["FL"]
us_states$sights[us_states$region == "GA"] <- map["GA"]
us_states$sights[us_states$region == "HI"] <- map["HI"]
us_states$sights[us_states$region == "ID"] <- map["ID"]
us_states$sights[us_states$region == "IL"] <- map["IL"]
us_states$sights[us_states$region == "IN"] <- map["IN"]
us_states$sights[us_states$region == "IA"] <- map["IA"]
us_states$sights[us_states$region == "KS"] <- map["KS"]
us_states$sights[us_states$region == "KY"] <- map["KY"]
us_states$sights[us_states$region == "LA"] <- map["LA"]
us_states$sights[us_states$region == "ME"] <- map["ME"]
us_states$sights[us_states$region == "MD"] <- map["MD"]
us_states$sights[us_states$region == "MA"] <- map["MA"]
us_states$sights[us_states$region == "MI"] <- map["MI"]
us_states$sights[us_states$region == "MN"] <- map["MN"]
us_states$sights[us_states$region == "MS"] <- map["MS"]
us_states$sights[us_states$region == "MO"] <- map["MO"]
us_states$sights[us_states$region == "MT"] <- map["MT"]
us_states$sights[us_states$region == "NE"] <- map["NE"]
us_states$sights[us_states$region == "NV"] <- map["NV"]
us_states$sights[us_states$region == "NH"] <- map["NH"]
us_states$sights[us_states$region == "NJ"] <- map["NJ"]
us_states$sights[us_states$region == "NM"] <- map["NM"]
us_states$sights[us_states$region == "NY"] <- map["NY"]
us_states$sights[us_states$region == "NC"] <- map["NC"]
us_states$sights[us_states$region == "ND"] <- map["ND"]
us_states$sights[us_states$region == "OH"] <- map["OH"]
us_states$sights[us_states$region == "OK"] <- map["OK"]
us_states$sights[us_states$region == "OR"] <- map["OR"]
us_states$sights[us_states$region == "PA"] <- map["PA"]
us_states$sights[us_states$region == "RI"] <- map["RI"]
us_states$sights[us_states$region == "SC"] <- map["SC"]
us_states$sights[us_states$region == "SD"] <- map["SD"]
us_states$sights[us_states$region == "TN"] <- map["TN"]
us_states$sights[us_states$region == "TX"] <- map["TX"]
us_states$sights[us_states$region == "UT"] <- map["UT"]
us_states$sights[us_states$region == "VT"] <- map["VT"]
us_states$sights[us_states$region == "VA"] <- map["VA"]
us_states$sights[us_states$region == "WA"] <- map["WA"]
us_states$sights[us_states$region == "WV"] <- map["WV"]
us_states$sights[us_states$region == "WI"] <- map["WI"]
us_states$sights[us_states$region == "WY"] <- map["WY"]
p <- ggplot(data = us_states,
mapping = aes(x = long, y = lat,
group = group, fill= sights))
p + geom_polygon(color = "gray90", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
guides(fill = FALSE)
plot(UFO$State, UFO$Sights)
barplot(table(UFO$Period), main="Bar Chart of Period")
plot(UFO$Period, UFO$Sights)
barplot(table(UFO$Month), main="Bar Chart of Month")
plot(UFO$Month, UFO$Sights)
barplot(table(UFO$Weekday), main="Bar Chart of Weekday")
plot(UFO$Weekday, UFO$Sights)
barplot(table(UFO$Hour), main="Bar Chart of Hour")
plot(UFO$Hour, UFO$Sights)
# Removing outlier
UFO <- UFO[UFO$Sights != 72]
library("knitr")
library("kableExtra")
library(broom)
library(dplyr)
model <- glm(Sights ~ ., family = poisson(link = "log"),  data = UFO)
kable(glance(model), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
foi <- glm(Sights ~ .*Period - Period*Period,family = poisson(link = "log"),  data = UFO)
save(foi,file="foi1")
anova(model,foi, test = "Chisq")
anova(foi, test = "Chisq")
#foi <- glm(Sights ~ .*State - State*State, family = poisson(link = "log"),  data = UFO)
#save(foi,file="foi2")
#anova(model,foi, test = "Chisq")
#anova(foi, test = "Chisq")
#foi <- glm(Sights ~ .*Month - Month*Month, family = poisson(link = "log"),  data = UFO)
#save(foi,file="foi3")
#anova(model,foi, test = "Chisq")
#anova(foi, test = "Chisq")
#foi <- glm(Sights ~ .*Weekday - Weekday*Weekday, family = poisson(link = "log"),  data = UFO)
#save(foi,file="foi4")
#anova(model,foi, test = "Chisq")
#anova(foi, test = "Chisq")
#foi <- glm(Sights ~ .*Hour - Hour*Hour, family = poisson(link = "log"),  data = UFO)
#save(foi,file="foi5")
#anova(model,foi, test = "Chisq")
#anova(foi, test = "Chisq")
#this took a WHILE
#nullModel <- glm(Sights ~ 1,
#                 family = poisson(link = "log"),
#                 data = UFO)
#save(nullModel,file="nullModel")
#
#completeModel <- glm(Sights ~ (.)^2,
#            family = poisson(link = "log"),
#            data = UFO)
#save(completeModel,file="completeModel")
#
#BICForward <- step(nullModel,
#                   scope = list(upper=completeModel),
#                   direction="both",
#                   criterion = "BIC",
#                   k = log(nrow(UFO)))
#save(BICForward,file="BICForward")
#
#BICBackward <- step(completeModel,
#                    scope = list(lower=nullModel),
#                    direction="both",
#                    criterion = "BIC",
#                    k = log(nrow(UFO)))
#save(BICBackward,file="BICBackward")
#
#AICForward <- step(nullModel,
#                   scope = list(upper=completeModel),
#                   direction="both",
#                   criterion = "AIC",
#                   k = 2)
#save(AICForward,file="AICForward")
load("BICForward")
load("AICForward")
load("BICBackward")
load("AICBackward")
load("nullModel")
load("completeModel")
summary(BICForward)
summary(AICForward)
summary(BICBackward)
summary(AICBackward)
summary(nullModel)
kable(glance(BICForward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
kable(glance(AICForward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
kable(glance(BICBackward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
kable(glance(AICBackward), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
chosenModel <- BICForward
anova(chosenModel, test = "Chisq")
anova(nullModel, chosenModel, test="Chisq")
chosenModel <- BICForward
anova(chosenModel, test = "Chisq")
anova(nullModel, chosenModel, test="Chisq")
par(mfrow=c(2,2))
plot(chosenModel)
library(car)
library(AER)
dispersiontest(chosenModel)
dispersiontest(chosenModel, trafo = 1)
dispersiontest(chosenModel, trafo = 2)
library(effects)
m.effects <- effects::allEffects(chosenModel)
plot(m.effects, "State:Hour")
plot(m.effects)
library(effects)
m.effects <- effects::allEffects(chosenModel)
plot(m.effects)
library(effects)
m.effects <- effects::allEffects(chosenModel)
plot(m.effects)
plot(m.effects, "State:Hour")
m.effects$Month
m.effects$`Hour:Period`
plot(m.effects$Month)
plot(m.effects$Weekday)
plot(m.effects$`Hour:Period`)
plot(m.effects, "State:Hour")
plot(m.effects$Month)
plot(m.effects$Weekday)
plot(m.effects$`Hour:Period`)
aux <- ""
data$i
data[[i]]
data[i]
aux <- ""
for(i in names(data)[7:28]){#for each column
for(j in length(data[i])){ #per row
aux <- append(aux,data$i[[j]])
}
data$strategy[i] <- aux
}
i
names(data())
names(data)
library(ggplot2) # Data visualization
library(ggrepel) # Labels on plots
library(dplyr)
library(RSQLite)
library(mice)
library(VIM)
dbListTables(con)
con <- dbConnect(SQLite(), dbname="database.sqlite")
league <- tbl_df(dbGetQuery(con,"SELECT * FROM League"))
team   <- tbl_df(dbGetQuery(con,"SELECT * FROM Team"))
match  <- tbl_df(dbGetQuery(con,"SELECT * FROM Match"))
players <- tbl_df(dbGetQuery(con, "SELECT * FROM Player"))
player_attrs <- tbl_df(dbGetQuery(con, "SELECT * FROM Player_Attributes"))
countries <- tbl_df(dbGetQuery(con, "SELECT * FROM Country")) #not relevant at all
team_attrs <- tbl_df(dbGetQuery(con, "SELECT * FROM Team_Attributes"))
data <- dbGetQuery(con,"SELECT *
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT ON HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT ON AT.team_api_id = Match.away_team_api_id
WHERE League.id = 21518")
data$goal <- NULL
data$corner <- NULL
data$shotoff <- NULL
data$shoton <- NULL
data$possession <- NULL
data$cross <- NULL
data$goal <- NULL
data <- dbGetQuery(con,"SELECT *
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT ON HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT ON AT.team_api_id = Match.away_team_api_id
WHERE League.id = 21518")
data <- dbGetQuery(con,"SELECT *
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT ON HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT ON AT.team_api_id = Match.away_team_api_id
WHERE League.id = 21518")
?median
median([0,1,2,3,4,5])
median(c(0,1,2,3,4,5)
)
median(c(5,1,2,3,0,4)
)
median(c(5,1,4,3,0,2))
median
?ca
library(ca)
install.packages(ca)
?catdes
library(FactoMineR)
library(FactoMineR)
?catdes
install.packages("ca")
??ca
match$goal[!is.na(match$goal)]
match$goal[-is.na(match$goal)]
match$goal[is.na(match$goal) == FALSE]
index <- is.na(match$goal)
index <- which(is.na(match$goal))
setwd("C:/Users/Meyerhofer/Desktop/UNI/referee-bot/data-science/r")
source("libraries.R")
source("loadingDB.R")
match$goal
index <- which(is.na(match$goal))
index
match$goal[is.na(match$goal)]
match$league_id[is.na(match$goal)]
table(match$league_id[is.na(match$goal)])
matchData <- dbGetQuery(con,"SELECT Country.name AS country_name,  League.name, count(*) as total
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id
GROUP BY Country.name, League.name")
matchData$goals
matchData <- dbGetQuery(con,"SELECT Country.name AS country_name,  League.name, goal, count(*) as total
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id
GROUP BY Country.name, League.name")
matchData$goal
matchData$name[is.na(matchData$goal)]
table(matchData$[is.na(matchData$goal)])
table(matchData$goal[is.na(matchData$goal)])
table(matchData$goal)
lenght(table(matchData$goal))
length(table(matchData$goal))
matchData <- dbGetQuery(con,"SELECT Country.name AS country_name,  League.name, goal
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id
GROUP BY Country.name, League.name")
length(table(matchData$goal))
matchData
is.na(matchData$goal)
matchData <- dbGetQuery(con,"SELECT *
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id
GROUP BY Country.name, League.name")
matchData
matchData$goal
matchData <- dbGetQuery(con,"SELECT *
FROM Match
JOIN Country on Country.id = Match.country_id
JOIN League on League.id = Match.league_id
LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id
LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id")
is.na(matchData$goal)
length(table(matchData$goal))
matchData$name
matchData$name[is.na(matchData$goal)]
table(matchData$name[is.na(matchData$goal)])
!is.na(matchData$goal)
matchData$goal[!is.na(matchData$goal]
length(table(matchData$goal))
table(matchData$name[is.na(matchData$goal)])
matchData$goal[!is.na(matchData$goal]
length(table(matchData$goal))
table(matchData$name[is.na(matchData$goal)])
matchData$goal[!is.na(matchData$goal)]
